//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace RegisterAndExportPdfFonts.PdfFontsServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PdfFontsService.FontData", Namespace="http://schemas.datacontract.org/2004/07/RegisterAndExportPdfFonts.Web")]
    public partial class PdfFontsServiceFontData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] BytesField;
        
        private string FontFamilyNameField;
        
        private bool IsBoldField;
        
        private bool IsItalicField;
        
        private bool IsValidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FontFamilyName {
            get {
                return this.FontFamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FontFamilyNameField, value) != true)) {
                    this.FontFamilyNameField = value;
                    this.RaisePropertyChanged("FontFamilyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBold {
            get {
                return this.IsBoldField;
            }
            set {
                if ((this.IsBoldField.Equals(value) != true)) {
                    this.IsBoldField = value;
                    this.RaisePropertyChanged("IsBold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsItalic {
            get {
                return this.IsItalicField;
            }
            set {
                if ((this.IsItalicField.Equals(value) != true)) {
                    this.IsItalicField = value;
                    this.RaisePropertyChanged("IsItalic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="PdfFontsServiceReference.PdfFontsService")]
    public interface PdfFontsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:PdfFontsService/GetFontData", ReplyAction="urn:PdfFontsService/GetFontDataResponse")]
        System.IAsyncResult BeginGetFontData(string fontFamilyName, bool isItalic, bool isBold, System.AsyncCallback callback, object asyncState);
        
        RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData EndGetFontData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PdfFontsServiceChannel : RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFontDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFontDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PdfFontsServiceClient : System.ServiceModel.ClientBase<RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService>, RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService {
        
        private BeginOperationDelegate onBeginGetFontDataDelegate;
        
        private EndOperationDelegate onEndGetFontDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetFontDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PdfFontsServiceClient() {
        }
        
        public PdfFontsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PdfFontsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PdfFontsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PdfFontsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetFontDataCompletedEventArgs> GetFontDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService.BeginGetFontData(string fontFamilyName, bool isItalic, bool isBold, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFontData(fontFamilyName, isItalic, isBold, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService.EndGetFontData(System.IAsyncResult result) {
            return base.Channel.EndGetFontData(result);
        }
        
        private System.IAsyncResult OnBeginGetFontData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fontFamilyName = ((string)(inValues[0]));
            bool isItalic = ((bool)(inValues[1]));
            bool isBold = ((bool)(inValues[2]));
            return ((RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService)(this)).BeginGetFontData(fontFamilyName, isItalic, isBold, callback, asyncState);
        }
        
        private object[] OnEndGetFontData(System.IAsyncResult result) {
            RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData retVal = ((RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService)(this)).EndGetFontData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFontDataCompleted(object state) {
            if ((this.GetFontDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFontDataCompleted(this, new GetFontDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFontDataAsync(string fontFamilyName, bool isItalic, bool isBold) {
            this.GetFontDataAsync(fontFamilyName, isItalic, isBold, null);
        }
        
        public void GetFontDataAsync(string fontFamilyName, bool isItalic, bool isBold, object userState) {
            if ((this.onBeginGetFontDataDelegate == null)) {
                this.onBeginGetFontDataDelegate = new BeginOperationDelegate(this.OnBeginGetFontData);
            }
            if ((this.onEndGetFontDataDelegate == null)) {
                this.onEndGetFontDataDelegate = new EndOperationDelegate(this.OnEndGetFontData);
            }
            if ((this.onGetFontDataCompletedDelegate == null)) {
                this.onGetFontDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFontDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetFontDataDelegate, new object[] {
                        fontFamilyName,
                        isItalic,
                        isBold}, this.onEndGetFontDataDelegate, this.onGetFontDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService CreateChannel() {
            return new PdfFontsServiceClientChannel(this);
        }
        
        private class PdfFontsServiceClientChannel : ChannelBase<RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService>, RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService {
            
            public PdfFontsServiceClientChannel(System.ServiceModel.ClientBase<RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetFontData(string fontFamilyName, bool isItalic, bool isBold, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fontFamilyName;
                _args[1] = isItalic;
                _args[2] = isBold;
                System.IAsyncResult _result = base.BeginInvoke("GetFontData", _args, callback, asyncState);
                return _result;
            }
            
            public RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData EndGetFontData(System.IAsyncResult result) {
                object[] _args = new object[0];
                RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData _result = ((RegisterAndExportPdfFonts.PdfFontsServiceReference.PdfFontsServiceFontData)(base.EndInvoke("GetFontData", _args, result)));
                return _result;
            }
        }
    }
}
